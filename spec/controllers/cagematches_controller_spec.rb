require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CagematchesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Cagematch. As you add validations to Cagematch, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      "title" => "CageMatch Title",
      "slug" => "my-slug"
    }
  }

  let(:invalid_attributes) {
    {
      "title" => nil,
      "slug" => nil
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CagematchesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      cagematch = Cagematch.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      cagematch = Cagematch.create! valid_attributes
      get :show, params: {id: cagematch.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      cagematch = Cagematch.create! valid_attributes
      get :edit, params: {id: cagematch.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Cagematch" do
        expect {
          post :create, params: {cagematch: valid_attributes}, session: valid_session
        }.to change(Cagematch, :count).by(1)
      end

      it "redirects to the created cagematch" do
        post :create, params: {cagematch: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Cagematch.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {cagematch: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          "title" => "my title",
          "tag_line" => "A dangerous place",
          "slug" => "a-slug",
          "time_slot" => "Thursdays at 11",
          "theater_name" => "IRC Theater",
          "theater_url" => "https://improv.example.com",
          "venue_address" => "100 Main Street, Village, PA",
          "box_office_url" => "https://boxoffice.example.com",
          "box_office_phone_number" => "309-256-7878",
          "ticket_price_description" => "Two for the price of 1",
          "show_description" => "Well, la di dah",
          "logo_url" => "",
          "show_picture_url" => "https://example.com/picture.jpg"
        }
      }

      it "updates the requested cagematch" do
        cagematch = Cagematch.create! valid_attributes
        put :update, params: {id: cagematch.to_param, cagematch: new_attributes}, session: valid_session
        cagematch.reload
        expect(cagematch.title).to eq("my title")
        expect(cagematch.slug).to eq("a-slug")
        expect(cagematch.tag_line).to eq("A dangerous place")
        expect(cagematch.time_slot).to eq("Thursdays at 11")
        expect(cagematch.theater_name).to eq("IRC Theater")
        expect(cagematch.theater_url).to eq("https://improv.example.com")
        expect(cagematch.venue_address).to eq("100 Main Street, Village, PA")
        expect(cagematch.box_office_url).to eq("https://boxoffice.example.com")
        expect(cagematch.box_office_phone_number).to eq("309-256-7878")
        expect(cagematch.ticket_price_description).to eq("Two for the price of 1")
        expect(cagematch.show_description).to eq("Well, la di dah")
        expect(cagematch.logo_url).to eq("")
        expect(cagematch.show_picture_url).to eq("https://example.com/picture.jpg")
      end

      it "redirects to the cagematch" do
        cagematch = Cagematch.create! valid_attributes
        put :update, params: {id: cagematch.to_param, cagematch: valid_attributes}, session: valid_session
        expect(response).to redirect_to(cagematch)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        cagematch = Cagematch.create! valid_attributes
        put :update, params: {id: cagematch.to_param, cagematch: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested cagematch" do
      cagematch = Cagematch.create! valid_attributes
      expect {
        delete :destroy, params: {id: cagematch.to_param}, session: valid_session
      }.to change(Cagematch, :count).by(-1)
    end

    it "redirects to the cagematches list" do
      cagematch = Cagematch.create! valid_attributes
      delete :destroy, params: {id: cagematch.to_param}, session: valid_session
      expect(response).to redirect_to(cagematches_url)
    end
  end

end
